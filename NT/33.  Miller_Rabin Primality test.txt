//like logn per test
//Miller rabin with 100% accuracy 

#include<bits/stdc++.h>
using namespace std;

#define ll long long int

ll mulmod(ll a,ll b,ll m){ll x=0,y=a%m; while(b>0){if(b&1) x=(x+y)%m; y=(y*2LL)%m;b/=2;}return x%m;}
ll modpow(ll a,ll b,ll m){ll ans=1;while(b){if(b&1)ans=mulmod(ans,a,m);b/=2;a=mulmod(a,a,m);}return ans%m;}
bool check_composite(ll n,ll a,ll d,ll s){
    ll x= modpow(a,d,n);
    if(x==1 || x==n-1) return false;
    for(ll i=1;i<s;i++){
        x= (ll)x*x%n;
        if(x==n-1) return false;
    }
    return true;
}
bool MillerRabin(ll n){
    if(n<2) return false;
    
    int r=0;
    ll d=n-1;
    while(d%2==0){
        d/=2;
        r++;
    }
    for(int a: {2,3,5,7,11,13,17,19,23,29,31,37}){
        if(n==a) return true;
        if(check_composite(n,a,d,r)) return false;
    }
    return true;
}

int main(){
   int Test=1;
   cin>>Test;
   while(Test--){
       ll n; cin>>n;
       if(MillerRabin(n)) cout<<"YES"<<endl;
       else cout<<"NO"<<endl;
   }
   return 0;
}
/*

*/

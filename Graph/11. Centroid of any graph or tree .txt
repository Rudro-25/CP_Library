#include <bits/stdc++.h>
#define mx 100007
using namespace std;

std::vector<int> adj[mx], ch;
int n;

//The vertex of this tree is called centroid if the size of each 
//connected component that appears if this vertex is removed from the tree doesn't exceed ...
//A vertex is a centroid of a tree only when you cut this vertex
//(remove it and remove all edges from this vertex), the size of
//the largest connected component of the remaining graph is the smallest possible...
//kno node + tar sather edge remove korle j componet gula thake tar modher largest cmponent 
//er number ta smallest hobe j node remove korle tara centroid...
//a tree has at most 2 centroid and both must be adjacence....

vector<int> Centroid()
{
    vector<int> centroid;
    vector<int> sz(n+5);
    function<void (int, int)> dfs = [&](int u, int prev) {
        sz[u] = 1;
        bool is_centroid = true;
        for (auto v : adj[u]) if (v != prev) {
                dfs(v, u);
                sz[u] += sz[v];
                if (sz[v] > n / 2) is_centroid = false;
            }
        if (n - sz[u] > n / 2) is_centroid = false;
        if (is_centroid) centroid.push_back(u);
    };
    dfs(1, -1);
    return centroid;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int tc=1;
    //cin >> tc;

    while (tc--)
    {
        cin >> n;

        for ( int i = 1; i < n; i++ )
        {
            int p, q;
            cin >> p >> q;

            adj[p].push_back(q);
            adj[q].push_back(p);
        }

        std::vector<int> v= Centroid();

        for(auto it : v)
            cout<<it<<' ';
        cout<<endl;
        for(int i=1;i<=n;i++) adj[i].clear();
    }
}

/*
5
1 2
1 3
2 4
2 5

ans: 2

6
1 2
1 3
1 4
2 5
2 6

ans: 2 1

*/

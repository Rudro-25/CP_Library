//Find longest substring which is prefix,suffix and also another substring
//O(n) using z algo

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define      ll                  long long
#define      pb                 push_back
#define      mp                 make_pair
#define      all(x)             x.begin(),x.end()
#define      Ceil(x,y)           ((x+y-1)/y)
#define      gcd(a,b)            __gcd(a,b)
#define      lcm(a,b)           (a*b)/gcd(a,b)
#define      InTheNameOfGod      ios::sync_with_stdio(0);cin.tie(0); cout.tie(0);

template <typename T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

constexpr ll mod = 1e9 + 7;
const ll N=3e6+5;

vector<int> z_function(string s) {
    int n = (int) s.length();
    vector<int> z(n);
    for (int i = 1, l = 0, r = 0; i < n; ++i) {
        if (i <= r)
            z[i] = min (r - i + 1, z[i - l]);
        while (i + z[i] < n && s[z[i]] == s[i + z[i]])
            ++z[i];
        if (i + z[i] - 1 > r)
            l = i, r = i + z[i] - 1;
    }
    return z;
}

void solve(){
   ll n;
   string s;
   cin>>s;
   n= s.size();
   vector<int> v= z_function(s);

   int mx=0;
   for(ll i=0;i<n;i++){
     if((v[i]+i)!=n){
      mx=max(mx,v[i]);
     }
   }
   ll ans=0;
   for(ll i=0;i<n;i++){
    if((v[i]+i)==n && v[i]<=mx){
      ans=v[i]; break;
    }
   }

   cout<<ans<<endl;


}

int main(){
   InTheNameOfGod;
   ll Test=1;
   //cin>>Test;
   while(Test--){
     solve();
    }
  return 0;
}
/*
fixprefixsuffix

ans: 3 (fix)

aaaabaaaaaaa

ans: 4 (aaaa)

*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define      ll                  long long

const int N = 1e6 + 9;

int power(long long n, long long k, const int mod) {
  int ans = 1 % mod;
  n %= mod;
  if (n < 0) n += mod;
  while (k) {
    if (k & 1) ans = (long long) ans * n % mod;
    n = (long long) n * n % mod;
    k >>= 1;
  }
  return ans;
}

const int MOD1 = 127657753, MOD2 = 987654319;
const int p1 = 137, p2 = 277;
int ip1, ip2;
pair<int, int> pw[N], ipw[N];
void prec() {
  pw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    pw[i].first = 1LL * pw[i - 1].first * p1 % MOD1;
    pw[i].second = 1LL * pw[i - 1].second * p2 % MOD2;
  }
  ip1 = power(p1, MOD1 - 2, MOD1);
  ip2 = power(p2, MOD2 - 2, MOD2);
  ipw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    ipw[i].first = 1LL * ipw[i - 1].first * ip1 % MOD1;
    ipw[i].second = 1LL * ipw[i - 1].second * ip2 % MOD2;
  }

}
struct Hashing {
  int n;
  string s; // 0 - indexed
  vector<pair<int, int>> hs; // 1 - indexed
  Hashing() {}
  Hashing(string _s) {
    n = _s.size();
    s = _s;
    hs.emplace_back(0, 0);
    for (int i = 0; i < n; i++) {
      pair<int, int> p;
      p.first = (hs[i].first + 1LL * pw[i].first * s[i] % MOD1) % MOD1;
      p.second = (hs[i].second + 1LL * pw[i].second * s[i] % MOD2) % MOD2;
      hs.push_back(p);
    }
  }
  pair<int, int> get_hash(int l, int r) { // 1 - indexed
    assert(1 <= l && l <= r && r <= n);
    pair<int, int> ans;
    ans.first = (hs[r].first - hs[l - 1].first + MOD1) * 1LL * ipw[l - 1].first % MOD1;
    ans.second = (hs[r].second - hs[l - 1].second + MOD2) * 1LL * ipw[l - 1].second % MOD2;
    return ans;
  }
  int single_hash(int l, int r){ // 1 - indexed
    int ans;
    ans = (hs[r].first - hs[l - 1].first + MOD1) * 1LL * ipw[l - 1].first % MOD1;
    return ans;
  }
  pair<int, int> get_hash() {
    return get_hash(1, n);
  }
};
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  prec();
  int t=1;
  int n;
  while (t--) {
    string s, t , lcs_str;
    cin >> s >> t;
    int len1= s.size(), len2= t.size();
    Hashing h(s); Hashing h1(t);

    int l=0,r= min(len1,len2);
    int ans=0, hash_val;
    while(l<=r){
       bool ck=false;
       int mid= (l+r)/2;
       unordered_map <int,int> mp;
       for(int i=1;i<=len1-mid+1;i++){
         ll val= h.single_hash(i,i+mid-1);
         mp[val]=1;
       }
       for(int i=1;i<=len2-mid+1;i++){
         ll val= h1.single_hash(i,i+mid-1);
         if(mp.find(val)!=mp.end()){
            hash_val=val;
            ck=true; break;
         }
       }
       //break;
       if(ck){
         ans=mid;
         l=mid+1;
       }
       else{
         r=mid-1;
       }
    }

    for(int i=1;i<=len1-ans+1;i++){
         ll val= h.single_hash(i,i+ans-1);
         if(val==hash_val){
            for(ll j=i;j<=i+ans-1;j++){
                lcs_str+=s[j-1];
            }
         }
    }



    cout<<ans<<' '<<lcs_str<<endl;



    //auto hs = Hashing(p).get_hash();
    // for(int i = 1; i + n - 1 <= s.size(); i++) {
    //   if (h.get_hash(i, i + n - 1) == hs) cout << i - 1 << '\n';
    // }
    // cout << '\n';
  }

  return 0;
}
/*
bapsonline campbapconsite

ans:
3 bap
*/
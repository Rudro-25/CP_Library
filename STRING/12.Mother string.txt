//Mother String
//Given an array of string A. For every query given a string
//find how many string in the array A are substring of S.

#include<bits/stdc++.h>
using namespace std;

#define      ll                  long long
const int N = 1e6 + 9;

int power(long long n, long long k, const int mod) {
  int ans = 1 % mod;
  n %= mod;
  if (n < 0) n += mod;
  while (k) {
    if (k & 1) ans = (long long) ans * n % mod;
    n = (long long) n * n % mod;
    k >>= 1;
  }
  return ans;
}

const int MOD1 = 127657753, MOD2 = 987654319;
const int p1 = 137, p2 = 277;
int ip1, ip2;
pair<int, int> pw[N], ipw[N];
void prec() {
  pw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    pw[i].first = 1LL * pw[i - 1].first * p1 % MOD1;
    pw[i].second = 1LL * pw[i - 1].second * p2 % MOD2;
  }
  ip1 = power(p1, MOD1 - 2, MOD1);
  ip2 = power(p2, MOD2 - 2, MOD2);
  ipw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    ipw[i].first = 1LL * ipw[i - 1].first * ip1 % MOD1;
    ipw[i].second = 1LL * ipw[i - 1].second * ip2 % MOD2;
  }

}
struct Hashing {
  int n;
  string s; // 0 - indexed
  vector<pair<int, int>> hs; // 1 - indexed
  Hashing() {}
  Hashing(string _s) {
    hs.clear();
    n = _s.size();
    s = _s;
    hs.emplace_back(0, 0);
    for (int i = 0; i < n; i++) {
      pair<int, int> p;
      p.first = (hs[i].first + 1LL * pw[i].first * s[i] % MOD1) % MOD1;
      p.second = (hs[i].second + 1LL * pw[i].second * s[i] % MOD2) % MOD2;
      hs.push_back(p);
    }
  }
  pair<int, int> get_hash(int l, int r) { // 1 - indexed
    assert(1 <= l && l <= r && r <= n);
    pair<int, int> ans;
    ans.first = (hs[r].first - hs[l - 1].first + MOD1) * 1LL * ipw[l - 1].first % MOD1;
    ans.second = (hs[r].second - hs[l - 1].second + MOD2) * 1LL * ipw[l - 1].second % MOD2;
    return ans;
  }
  int single_hash(int l, int r){ // 1 - indexed
    int ans;
    ans = (hs[r].first - hs[l - 1].first + MOD1) * 1LL * ipw[l - 1].first % MOD1;
    return ans;
  }
  pair<int, int> get_hash() {
    return get_hash(1, n);
  }
};
////Trie
ll node_id[1000007][28],end_word[1000007],ct,prefix_count[1000007];

void insert_in_trie(string s){
    ll par_node=0;
    for(ll i=0;i<s.size();i++){
        if(node_id[par_node][s[i]-'a']==0)
            node_id[par_node][s[i]-'a']=++ct;
        par_node=node_id[par_node][s[i]-'a'];
    }
    end_word[par_node]=1;
    //cout<<par_node<<endl;
}

ll query_in_trie(string s){
    ll par_node=0,cnt=0;
    for(ll i=0;i<s.size();i++){
        if(node_id[par_node][s[i]-'a']==0){
            break;
        }
        //cout<<par_node<<' '<<end_word[par_node]<<endl;
        if(end_word[par_node]){
            cnt+=end_word[par_node]; 
            end_word[par_node]=0;
        }
        par_node=node_id[par_node][s[i]-'a'];
    }
    //cout<<par_node<<' '<<"f"<<' '<<end_word[par_node]<<endl;
    if(end_word[par_node]){
        cnt+=end_word[par_node]; 
        end_word[par_node]=0;
    }
    return cnt;
}


int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  prec();
    
    ll n,ans=0;
    string s, qs;
    cin >> n; 
    unordered_map <int,int> mp;
    ll mid=3;
    for(int i=0;i<n;i++){
        cin>>s;
        int len=s.size();
        if(len<mid){
          insert_in_trie(s);
        }
        else{
            Hashing h(s);
            ll val= h.single_hash(1,len);
            mp[val]=1;
        }
    }
    
    cin>>qs;
    
    //Those len>mid
    Hashing hh(qs);
    ll len=qs.size();
    for(int i=1;i<=qs.size();i++){
        for(ll j=0; ;j++){
            if((i+mid+j)>len) break;
          ll val= hh.single_hash(i,i+mid+j);
          if(mp[val]) ++ans;
        }
    }

    //Those len<= mid.
    string use;
    ll bal=0;
    for(int i=len;i>=1;i--){
        use=qs[i-1]+use;
         ll bal= query_in_trie(use);
         ans+=bal;
    }



    cout<<ans<<endl;

  
  return 0;
}
/*
5
a
ba
ps
campus
online

bacsonlinecamp

ans:
3 (online & a,ba)
*/
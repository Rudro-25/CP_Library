//Mismatched String
//Given an array of string and pattern. For every query
//find if there have any string in the array which mismatch <= 1.
//O(all_string_length)

#include<bits/stdc++.h>
using namespace std;

#define      ll                  long long
const int N = 1e6 + 9;

int power(long long n, long long k, const int mod) {
  int ans = 1 % mod;
  n %= mod;
  if (n < 0) n += mod;
  while (k) {
    if (k & 1) ans = (long long) ans * n % mod;
    n = (long long) n * n % mod;
    k >>= 1;
  }
  return ans;
}

const int MOD1 = 127657753, MOD2 = 987654319;
const int p1 = 137, p2 = 277;
int ip1, ip2;
pair<int, int> pw[N], ipw[N];
void prec() {
  pw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    pw[i].first = 1LL * pw[i - 1].first * p1 % MOD1;
    pw[i].second = 1LL * pw[i - 1].second * p2 % MOD2;
  }
  ip1 = power(p1, MOD1 - 2, MOD1);
  ip2 = power(p2, MOD2 - 2, MOD2);
  ipw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    ipw[i].first = 1LL * ipw[i - 1].first * ip1 % MOD1;
    ipw[i].second = 1LL * ipw[i - 1].second * ip2 % MOD2;
  }

}
struct Hashing {
  int n;
  string s; // 0 - indexed
  vector<pair<int, int>> hs; // 1 - indexed
  Hashing() {}
  Hashing(string _s) {
    hs.clear();
    n = _s.size();
    s = _s;
    hs.emplace_back(0, 0);
    for (int i = 0; i < n; i++) {
      pair<int, int> p;
      p.first = (hs[i].first + 1LL * pw[i].first * s[i] % MOD1) % MOD1;
      p.second = (hs[i].second + 1LL * pw[i].second * s[i] % MOD2) % MOD2;
      hs.push_back(p);
    }
  }
  pair<int, int> get_hash(int l, int r) { // 1 - indexed
    assert(1 <= l && l <= r && r <= n);
    pair<int, int> ans;
    ans.first = (hs[r].first - hs[l - 1].first + MOD1) * 1LL * ipw[l - 1].first % MOD1;
    ans.second = (hs[r].second - hs[l - 1].second + MOD2) * 1LL * ipw[l - 1].second % MOD2;
    return ans;
  }
  int single_hash(int l, int r){ // 1 - indexed
    int ans;
    ans = (hs[r].first - hs[l - 1].first + MOD1) * 1LL * ipw[l - 1].first % MOD1;
    return ans;
  }
  pair<int, int> get_hash() {
    return get_hash(1, n);
  }
};
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  prec();
    
    ll n,q;
    string s, p;
    cin >> n >> q; 
    unordered_map <int,int> mp;
    for(int i=0;i<n;i++){
        cin>>s;
        int len=s.size();
        Hashing h(s);
        ll val= h.single_hash(1,len);
        mp[val]=1;
    }
    while(q--){
        bool ck=false;
        cin>>s;
        Hashing h(s);
        ll len=s.size();
        ll p_hash= h.single_hash(1,len);
        if(mp[p_hash]){
            ck=true;
        }
        for(ll i=0;i<len;i++){
            if(ck) break;
            ll  val= pw[i].first * s[i] *1LL;
            for(char ch='a';ch<='z';ch++){
               ll cur= pw[i].first*ch*1LL;
               ll xx= (p_hash- val + cur)% MOD1;
               if(mp[xx]) {
                ck=true; break;
               }
            }
            if(ck) break;
        }
        if(ck) cout<<"Found"<<endl;
        else cout<<"Not Found"<<endl;
    }
  
  return 0;
}
/*
5 5
abc
xyz
aba
string
short

strong
aaa
xyz
adc
bac

ans:
Found
Found
Found
Found
Not Found
*/
//Min character add at end to make the string palindrome.
//O(n)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define      ll                  long long
#define      pb                 push_back
#define      mp                 make_pair
#define      all(x)             x.begin(),x.end()
#define      Ceil(x,y)           ((x+y-1)/y)
#define      gcd(a,b)            __gcd(a,b)
#define      lcm(a,b)           (a*b)/gcd(a,b)
#define      InTheNameOfGod      ios::sync_with_stdio(0);cin.tie(0); cout.tie(0);

template <typename T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

constexpr ll mod = 1e9 + 7;
const ll N=3e6+5;

void solve(){
   ll n;
   string ss,s="#";
   cin>>ss;
   ll len= ss.size();
   for(ll i=0;i<ss.size();i++){
     s+=ss[i]; s+="#";
   }
   
   n=s.size();
   vector<int> d1(n); 
   //palindrome length for center at i
   for (int i = 0, l = 0, r = -1; i < n; i++) {
    int k = (i > r) ? 1 : min(d1[l + r - i], r - i);
    while (0 <= i - k && i + k < n && s[i - k] == s[i + k]) {
      k++;
    }
    d1[i] = --k;
    if (i + k > r) {
      l = i - k;
      r = i + k;
    }
  }
  
  for(ll i=0;i<n;i++) cout<<s[i]<<' '; cout<<endl;
  for(int i = 0; i < n; i++) cout << d1[i] << ' '; cout << endl;

  ll mx=0;
  for(ll i=0;i<n;i++){
     if(d1[i]==(n-i-1)){
       mx= d1[i]; break;
     }
  }
  

  cout<<"Min character add at end to make this string palindrome: "<<len-mx<<endl;




}

int main(){
   InTheNameOfGod;
   ll Test=1;
   //cin>>Test;
   while(Test--){
     solve();
    }
  return 0;
}
/*
xcaaeioie

ans:
# x # c # a # a # e # i # o # i # e #
0 1 0 1 0 1 2 1 0 1 0 1 0 5 0 1 0 1 0
Min character add at end to make this string palindrome: 4

*/
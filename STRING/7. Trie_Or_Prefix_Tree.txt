//Trie_Or_Prefix-Tree
//Insert,serach,delete,no_of_prefix_of_S
//every operation in O(height_of_tree)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define Max 10000000000000000
#define min_heap priority_queue <ll, vector<ll>, greater<ll> >

template <typename T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll node_id[1007][28],end_word[1007],n,prefix_count[1007];

void insert_in_trie(string s){
    ll par_node=0;
    for(ll i=0;i<s.size();i++){
        if(node_id[par_node][s[i]-'a']==-1)
            node_id[par_node][s[i]-'a']=++n;
        par_node=node_id[par_node][s[i]-'a'];
        prefix_count[par_node]++;
    }
    end_word[par_node]=1;
}

void search_in_trie(string s){
    ll par_node=0;
    for(ll i=0;i<s.size();i++){
        if(node_id[par_node][s[i]-'a']==-1){
            cout<<"String not found!"<<endl;
            return;
        }
        par_node=node_id[par_node][s[i]-'a'];
    }
    cout<<"No Of Times S as Prefix: "<<prefix_count[par_node]<<endl;
    if(end_word[par_node]) cout<<"String found!"<<endl;
    else cout<<"String found as prefix only!"<<endl;
}

void delete_word_in_trie(string s){
    ll par_node=0;
    for(ll i=0;i<s.size();i++){
        ll pre_parent=par_node;
        par_node=node_id[par_node][s[i]-'a'];
        prefix_count[par_node]--;
        if(prefix_count[par_node]==0)
            node_id[pre_parent][s[i]-'a']=-1;
    }
    end_word[par_node]=0;
}

int main()
{   
    memset(node_id,-1,sizeof(node_id));
    ll q;
    cin>>q;
    while(q--){
        ll c;
        string s;
        cin>>c>>s;
        if(c==1) insert_in_trie(s);
        if(c==2) search_in_trie(s);
        if(c==3) delete_word_in_trie(s);
    }

    return 0;
}
/*
11
1 baps
1 bacs
1 camp
1 campus

2 bacs
2 bac
2 cam

3 camp
2 cam
3 campus
2 cam

ans:
No Of Times S as Prefix: 1
String found!

No Of Times S as Prefix: 1
String found as prefix only!

No Of Times S as Prefix: 2
String found as prefix only!

No Of Times S as Prefix: 1
String found as prefix only!

String not found!

*/
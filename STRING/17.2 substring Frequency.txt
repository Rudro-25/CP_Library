//aho corasick
//O(26*text_len + all_words_len)
//Substring Frequency (II)
//https://lightoj.com/problem/substring-frequency-ii

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()

const ll N=250*1000+10000;

template <typename T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll node_id[N][28],ans[N],pos[N],n,failure[N];
ll num[N],end_word[N];
string pat[N];

int insert_in_trie(string s,ll id){
    ll par_node=0;
    for(ll i=0;i<s.size();i++){
        if(node_id[par_node][s[i]-'a']==0)
            node_id[par_node][s[i]-'a']=++n;
        par_node=node_id[par_node][s[i]-'a'];
    }
    // end_word[par_node]++;
    // num[par_node]=0;
    return par_node;
}

void make_failure_function(){
    queue<ll> q;
    for(ll i=0;i<26;i++){
        if(node_id[0][i])
            q.push(node_id[0][i]);
    }

    while(!q.empty()){
        ll u=q.front();
        q.pop();
        for(ll i=0;i<26;i++){
            if(node_id[u][i]){
                ll p=failure[u];
                while(p && node_id[p][i]==0){
                    p=failure[p];
                }
                failure[node_id[u][i]]=node_id[p][i];
                q.push(node_id[u][i]);
            }
        }
    }
}

void match_string(string s){ 
    ll par=0;
    for(ll i=0;i<s.size();i++){
        while(par!=0 && node_id[par][s[i]-'a']==0)
            par=failure[par];

            par=node_id[par][s[i]-'a'];
            int temp=par;
            while(temp){
                ans[temp]++;
                temp=failure[temp];
            }
    }
}

int main()
{   
    
    ll test=1; //cin>>test;
    ll cc=0;
    while(test--){
        ll n;
        cin>>n;
        memset(node_id,0,sizeof(node_id));
        for(ll i=1;i<=N;i++){
             ans[i]=failure[i]=end_word[i]=0;
        }
        string s;
        cin>>s;
        for(ll i=1;i<=n;i++){
            cin>>pat[i];
            pos[i]=insert_in_trie(pat[i],i);
        }

        make_failure_function();
        match_string(s);
        cout<<"Case "<<++cc<<":"<<endl;
        for(ll i=1;i<=n;i++){
            cout<<ans[pos[i]]<<endl;
        }
    }
    return 0;
}

/*
5
ababacbabc
aba
ba
ac
a
abc

ans:
Case 1:
2
3
1
4
1

*/


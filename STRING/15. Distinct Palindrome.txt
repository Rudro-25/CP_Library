//No of Distinct palindrome.
//max no of distinct palindrome in string is n = strlen.
//O(n)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define      ll                  long long
#define      pb                 push_back
#define      mp                 make_pair
#define      all(x)             x.begin(),x.end()
#define      Ceil(x,y)           ((x+y-1)/y)
#define      gcd(a,b)            __gcd(a,b)
#define      lcm(a,b)           (a*b)/gcd(a,b)
#define      InTheNameOfGod      ios::sync_with_stdio(0);cin.tie(0); cout.tie(0);

template <typename T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

constexpr ll mod = 1e9 + 7;
const ll N=3e6+5;

int power(long long n, long long k, const int mod) {
  int ans = 1 % mod;
  n %= mod;
  if (n < 0) n += mod;
  while (k) {
    if (k & 1) ans = (long long) ans * n % mod;
    n = (long long) n * n % mod;
    k >>= 1;
  }
  return ans;
}

const int MOD1 = 127657753, MOD2 = 987654319;
const int p1 = 137, p2 = 277;
int ip1, ip2;
pair<int, int> pw[N], ipw[N];
void prec() {
  pw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    pw[i].first = 1LL * pw[i - 1].first * p1 % MOD1;
    pw[i].second = 1LL * pw[i - 1].second * p2 % MOD2;
  }
  ip1 = power(p1, MOD1 - 2, MOD1);
  ip2 = power(p2, MOD2 - 2, MOD2);
  ipw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    ipw[i].first = 1LL * ipw[i - 1].first * ip1 % MOD1;
    ipw[i].second = 1LL * ipw[i - 1].second * ip2 % MOD2;
  }

}
struct Hashing {
  int n;
  string s; // 0 - indexed
  vector<pair<int, int>> hs; // 1 - indexed
  Hashing() {}
  Hashing(string _s) {
    n = _s.size();
    s = _s;
    hs.emplace_back(0, 0);
    for (int i = 0; i < n; i++) {
      pair<int, int> p;
      p.first = (hs[i].first + 1LL * pw[i].first * s[i] % MOD1) % MOD1;
      p.second = (hs[i].second + 1LL * pw[i].second * s[i] % MOD2) % MOD2;
      hs.push_back(p);
    }
  }
  pair<int, int> get_hash(int l, int r) { // 1 - indexed
    //assert(1 <= l && l <= r && r <= n);
    pair<int, int> ans;
    ans.first = (hs[r].first - hs[l - 1].first + MOD1) * 1LL * ipw[l - 1].first % MOD1;
    ans.second = (hs[r].second - hs[l - 1].second + MOD2) * 1LL * ipw[l - 1].second % MOD2;
    return ans;
  }
  int single_hash(int l, int r){ // 1 - indexed
    int ans;
    ans = (hs[r].first - hs[l - 1].first + MOD1) * 1LL * ipw[l - 1].first % MOD1;
    return ans;
  }
  pair<int, int> get_hash() {
    return get_hash(1, n);
  }
};

void solve(){
   ll n;
   string ss,s="#";
   cin>>ss;
   ll len= ss.size();
   for(ll i=0;i<ss.size();i++){
     s+=ss[i]; s+="#";
   }
   
   n=s.size();
   vector<int> d1(n); 
   //palindrome length for center at i
   for (int i = 0, l = 0, r = -1; i < n; i++) {
    int k = (i > r) ? 1 : min(d1[l + r - i], r - i);
    while (0 <= i - k && i + k < n && s[i - k] == s[i + k]) {
      k++;
    }
    d1[i] = --k;
    if (i + k > r) {
      l = i - k;
      r = i + k;
    }
  }
  Hashing h(s);
  
  for(ll i=0;i<n;i++) cout<<s[i]<<' '; cout<<endl;
  for(int i = 0; i < n; i++) cout << d1[i] << ' '; cout << endl;
  unordered_map<ll,ll> mp;
  for(ll i=0;i<n;i++){
    if(d1[i]==0) continue;
      for(ll l=i-d1[i],r=i+d1[i];l<r;l+=2,r-=2){
         ll val= h.single_hash(l+1,r+1);
         if(mp[val]) break;
         mp[val]=1;
      }
  }

  cout<<"No of Distinct Palindrome: "<<mp.size()<<endl;


}

int main(){
   InTheNameOfGod;
   ll Test=1;
   prec();
   //cin>>Test;
   while(Test--){
     solve();
    }
  return 0;
}
/*
aaaaa

ans:
# a # a # a # a # a #
0 1 2 3 4 5 4 3 2 1 0
No of Distinct Palindrome: 5

acad

ans:
# a # c # a # d #
0 1 0 3 0 1 0 1 0
No of Distinct Palindrome: 4
*/
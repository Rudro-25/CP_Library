//suffix array
//O(nlogn^2)
//Given a string sort all suffix
//pos[i] store suf[i-len] actual position in sorted suffix order
//ans[i] sorting er por i-pos e koto index ache
//longest common substring len of n string

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define Max 10000000000000000
#define min_heap priority_queue <ll, vector<ll>, greater<ll> >

template <typename T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

int main()
{   

    ll n; cin>>n;
    string s;
    for(ll i=0;i<n;i++){
        string ss;cin>>ss;
         s+=ss;
         s+="#";
    }
    ll len=s.size();
    ll index[len];
    vector<ll> ind;
    ll ct=1;
    for(ll i=0;i<s.size();i++){
        if(s[i]=='#'){
            ct++; ind.push_back(0);
        }
        else{
            ind.push_back(ct);
        }
    }


    ll pos[s.size()];

    vector<pair<ll,ll>> temp;
    for(ll i=0;i<len;i++)
        temp.pb({(ll)s[i],i});
    sort(all(temp));
    pos[temp[0].second]=0;
    for(ll i=1,ok=0;i<len;i++){
        if(temp[i].first!=temp[i-1].first) ok++;
        pos[temp[i].second]=ok;
    }

    ll ans[len];
    for(ll k=1;k<=len;){
        k*=2;
        vector<pair<pair<ll,ll>,ll>> a;
        for(ll i=0;i<len;i++)
            a.pb({{pos[i],pos[(i+k/2)%len]},i});
        sort(all(a));
        pos[a[0].second]=0;
        ans[0]=a[0].second;
        for(ll i=1,ok=0;i<len;i++){
            if(a[i].first!=a[i-1].first) ok++;
            pos[a[i].second]=ok;
            ans[i]=a[i].second;
        }
    }
    for(ll i=0;i<len;i++){
        cout<<pos[i]<<" ";
    }
    cout<<endl;
    for(ll i=0;i<len;i++){
        cout<<ans[i]<<" ";
    }
    cout<<endl;
    ll lcp[len],cur=0;
    for(ll i=0;i<len;i++){
        cur=max(0LL,cur-1);
        if(pos[i]==0) cur=0;
        else{
          ll bal= ans[pos[i]-1];
          ll x1=i+cur,x2=bal+cur;
          for( ; ; x1++,x2++){
            if(x1==len || x2==len) break;
            if(s[x1]!=s[x2]) break;
            else cur++;
          }
        }
        lcp[pos[i]]=cur;
        index[pos[i]]= ind[i];
    }
    cout<<s<<endl;
    for(ll i=0;i<len;i++){
        cout<<lcp[i]<<' ';
    }    
    cout<<endl;
    for(ll i=0;i<len;i++){
        cout<<index[i]<<' ';
    }    
    cout<<endl;
    ll no_of_dist_substring=0;
    for(ll i=1;i<len;i++){
        ll cur= len-i-lcp[pos[i-1]];
        no_of_dist_substring+=cur;
    }
    cout<<"no_of_dist_substring: "<<' '<<no_of_dist_substring<<endl;
    
    ll cnt[len];
    for(ll i=0;i<len;i++) cnt[i]=0;
    multiset<ll> st;
    ll l=0,lcs=0; ct=0;
    for(ll i=0;i<len;i++){
        if(!index[i]) continue;
        cnt[index[i]]++; st.insert(lcp[i]);
        if(cnt[index[i]]==1) ct++;
        if(ct==n){
            while(1){
                if(index[l]==0){
                    l++; continue;
                }
               cnt[index[l]]--;
               if(cnt[index[l]]==0){
                st.erase(lcp[l]); l++; ct--; break;
               }
               l++;
            }
            ll val= *st.begin();
           // cout<<l<<' '<<i<<' '<<val<<endl;
            lcs=max(lcs,val);
        }
    }

    cout<<"Longest Common Substring of n string: "<<lcs<<endl;


    return 0;
}
/*
3
abce
bca
dbca

ans: (0 based)
5 8 11 13 1 7 10 4 2 12 6 9 3 0
13 4 8 12 7 0 10 5 1 11 6 2 9 3
abce#bca#dbca#
0 1 1 0 2 1 0 4 2 0 3 1 0 0
0 0 0 3 2 1 3 2 1 3 2 1 3 1
no_of_dist_substring:  76
Longest Common Substring of n string: 2 (bc)
*/
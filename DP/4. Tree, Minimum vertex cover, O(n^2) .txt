//complexity: n^2
//tree,minimum vertex cover

#include <bits/stdc++.h>
using namespace std;

#define      PSB         push_back
#define      MP          make_pair
#define      ll          long long
#define      FastIO      ios::sync_with_stdio(0);cin.tie(0); cout.tie(0);
constexpr ll mod = 1e9  + 7;
const ll N=3e6+5;
const ll INF =1e18;

#define MAXN 100
#define EMPTY_VALUE -1

int mem[MAXN][2];
int par[MAXN];

vector<int> edges[MAXN];

int f(int u, int isGuard){
    if (mem[u][isGuard] != EMPTY_VALUE) {
        return mem[u][isGuard];
    }

    int answer = isGuard;

    for(auto v: edges[u]) {
        if (v == par[u]) continue;
        par[v] = u;
        if (isGuard == 0) {
            answer += f(v, 1);
        } else {
            answer += min(f(v, 1), f(v, 0));
        }
    }

    return mem[u][isGuard] = answer;
}

int main(){
  FastIO

    memset(mem, -1, sizeof(mem));
    memset(par, -1, sizeof(par));

    int n;
    scanf("%d", &n);
    for (int i = 1; i < n; i++) {
        int u, v;
        scanf("%d%d", &u, &v);

        edges[u].push_back(v);
        edges[v].push_back(u);
    }
    int ans = 0;

    ans = min(f(0, true), f(0, false));
    cout<<ans<<endl;


  return 0;
}
/**
Sample Input->
8
0 1
0 2
1 3
1 4
5 2
4 6
4 7

ans:
3
**/


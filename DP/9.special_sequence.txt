// s[i]=1 gula must nibo 0 ula optional..
//a1 - a2 + a3 - a4 + ....... + (-1)k-1 * ak
//Find max subseq sum

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define      ll                  long long
#define      pb                 push_back
#define      mp                 make_pair
#define      all(x)             x.begin(),x.end()
#define      Ceil(x,y)           ((x+y-1)/y)
#define      gcd(a,b)            __gcd(a,b)
#define      lcm(a,b)           (a*b)/gcd(a,b)
#define      InTheNameOfGod      ios::sync_with_stdio(0);cin.tie(0); cout.tie(0);

template <typename T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

constexpr ll mod = 1e9 + 7;
const ll N=1e5+5;

ll dp[N][2];


void solve(){
   ll n;
   cin>>n;
   vector<ll> a(n+1),s(n+1);
   for(ll i=1;i<=n;i++) cin>>a[i];
   for(ll i=1;i<=n;i++) cin>>s[i];

   dp[n+1][0]=dp[n+1][1]=0;
   for(ll i=n;i>=1;i--){
      if(s[i]){
         dp[i][0]= dp[i+1][1]-a[i];
         dp[i][1]=dp[i+1][0]+a[i];
      }
      else{
         dp[i][0]= max(dp[i+1][0],dp[i+1][1]-a[i]);
         dp[i][1]=max(dp[i+1][1],dp[i+1][0]+a[i]);
      }
   }

   cout<<dp[1][1]<<endl;


}

int main(){
   InTheNameOfGod;
   ll Test=1;
   //cin>>Test;
   while(Test--){
     solve();
    }
  return 0;
}
/*
5
1 2 3 4 5
1 0 0 0 0

ans: 4
*/
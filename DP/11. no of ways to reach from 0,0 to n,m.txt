//No of way to reach from(0,0) to (n,m)-recursive/iterative

#include<bits/stdc++.h>
using namespace std;

#define ll long long
const int N=4e4+1;
const int mod=1e9+7;
ll dp[101][101],n,m;
ll fill(ll x,ll y){
  if(x>n || x<1 || y>m || y<1) return 0;
  if(x==1 && y==1) return dp[x][y]=1;
  if(dp[x][y]!=-1) return dp[x][y];

  return dp[x][y]=fill(x-1,y)+fill(x,y-1);
}

//dp[i][j]= no of ways to reach (i,j) from (0,0)
int main(){
   int Test=1;
   //cin>>Test;
   while(Test--){
       cin>>n>>m;

       memset(dp,-1,sizeof dp);
       fill(n,m);

//        iterative
//        for(ll i=1;i<=n;i++) dp[i][1]=1;
//        for(ll i=1;i<=m;i++) dp[1][i]=1;

//        for(ll i=2;i<=n;i++){
//          for(ll j=2;j<=m;j++){
//            dp[i][j]=dp[i-1][j]+dp[i][j-1];
//          }
//        }

       for(ll i=1;i<=n;i++){
         for(ll j=1;j<=m;j++){
           cout<<dp[i][j]<<' ';
         }
         cout<<endl;
       }
       
   }
   return 0;
}
/*

*/

